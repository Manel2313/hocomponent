{"version":3,"sources":["components/spinner/spinner.js","components/moviesList/movieList.js","components/HOC.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","react_default","a","createElement","className","Component","HOC","WrappedComponent","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timeup","setTimeout","setState","console","log","inherits","createClass","key","value","spinner_spinner","React","MoviesList","movies","name","img","year","map","el","index","src","alt","App","moviesList_movieList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAqBeA,gMAjBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,qBAZEE,cC2DPC,EC1DH,SAAAC,GACR,gBAAAC,GACE,SAAAF,EAAYG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAP,IACjBI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAL,GAAAU,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAQ,GAGVC,WACE,kBACET,EAAKU,SAAS,CACZF,QAAQ,KAEZ,MAEFG,QAAQC,IAAIZ,EAAKO,MAAMC,QAbNR,EADrB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAL,EAAAE,GAAAG,OAAAa,EAAA,EAAAb,CAAAL,EAAA,EAAAmB,IAAA,SAAAC,MAAA,WAkBI,OAAOb,KAAKI,MAAMC,OAChBjB,EAAAC,EAAAC,cAACwB,EAAD,MAEA1B,EAAAC,EAAAC,cAACI,EAAqBM,KAAKJ,WArBjCH,EAAA,CAAyBsB,IAAMvB,WDyDpBC,aAxDX,SAAAuB,EAAYpB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACfnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMJ,KACDQ,MAAS,CACVa,OAAQ,CAAC,CACLC,KAAM,qBACNC,IAAK,6FACLC,KAAM,QAEV,CACIF,KAAM,QACNC,IAAK,0HACLC,KAAM,QAEV,CACIF,KAAM,OACNC,IAAK,sGACLC,KAAM,QAEV,CACIF,KAAM,YACNC,IAAK,mHACLC,KAAM,QAEV,CACIF,KAAM,WACNC,IAAK,gGACLC,KAAM,QAEV,CACIF,KAAM,YACNC,IAAK,2EACLC,KAAM,UA/BCvB,wEAsCf,OACIT,EAAAC,EAAAC,cAAA,WACKU,KAAKI,MAAMa,OAAOI,IAAI,SAACC,EAAIC,GACxB,OACInC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASqB,IAAKW,GACzBnC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYiC,IAAKF,EAAGH,IAAKM,IAAI,MACjDrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAKgC,EAAGJ,OACb9B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAKgC,EAAGF,mBA/CpB5B,cEWVkC,mLARX,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,cANUnC,aCSEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.520e2765.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './spinner.css'\r\nclass Spinner extends Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"spinner\"> \r\n                <div className=\"lds-roller\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Spinner;","import React, { Component } from 'react'\r\nimport './movieList.css'\r\nimport HOC from '../HOC.js'\r\n\r\nclass MoviesList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = ({\r\n            movies: [{\r\n                name: 'The little mermaid',\r\n                img: 'https://www.femalefirst.co.uk/image-library/port/620/t/the-little-mermaid-movie-poster.jpg',\r\n                year: '2019'\r\n            },\r\n            {\r\n                name: 'Mirai',\r\n                img: 'https://d32qys9a6wm9no.cloudfront.net/images/movies/poster/af/56deceddfd61d64fbc46a7748d09c31d_500x735.jpg?t=1541837931',\r\n                year: '2019'\r\n            },\r\n            {\r\n                name: 'Epic',\r\n                img: 'http://images6.fanpop.com/image/photos/36900000/Epic-movie-poster-disney-epic-36971177-937-1500.jpg',\r\n                year: '2019'\r\n            },\r\n            {\r\n                name: 'Fireworks',\r\n                img: 'https://i2.wp.com/www.animephproject.com/wp-content/uploads/2017/12/FB_IMG_1513080391258.jpg?fit=660%2C960&ssl=1',\r\n                year: '2019'\r\n            },\r\n            {\r\n                name: 'Next Gen',\r\n                img: 'https://m.media-amazon.com/images/M/MV5BMTU0MjAwMDkxNV5BMl5BanBnXkFtZTgwMTA4ODIxNjM@._V1_.jpg',\r\n                year: '2019'\r\n            },\r\n            {\r\n                name: 'Your name',\r\n                img: 'https://ih0.redbubble.net/image.505815507.9008/flat,550x550,075,f.u4.jpg',\r\n                year: '2019'\r\n            }]\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.movies.map((el, index) => {\r\n                    return (\r\n                        <div className=\"movies\" key={index}>\r\n                            <div><img className=\"movie-img\" src={el.img} alt=\"\" /></div>\r\n                            <div>\r\n                                <div><h1>{el.name}</h1></div>\r\n                                <div><h3>{el.year}</h3></div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HOC(MoviesList);","import React from 'react';\r\nimport Spinner from './spinner/spinner.js'\r\n\r\nconst HOC = WrappedComponent => {\r\n    return class HOC extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          timeup: true\r\n        };\r\n  \r\n        setTimeout(\r\n          () =>\r\n            this.setState({\r\n              timeup: false\r\n            }),\r\n          1500\r\n        );\r\n        console.log(this.state.timeup);\r\n      }\r\n  \r\n      render() {\r\n        return this.state.timeup ? (\r\n          <Spinner />\r\n        ) : (\r\n          <WrappedComponent {...this.props} />\r\n        );\r\n      }\r\n    };\r\n  };\r\n  \r\n  export default HOC;","import React, { Component } from 'react';\nimport MovieList from './components/moviesList/movieList.js'\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div>\n        <MovieList/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}